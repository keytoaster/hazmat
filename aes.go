package aes

import "fmt"
import _ "encoding/hex"


type b128 [16]byte

func (b b128) String() string {
	return fmt.Sprintf("%x", b[:])
}

var sBox = [256]byte {
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

var invSBox = [256]byte {
0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

var rc_i = [11]byte{/* unused */ 0, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36}

// TODO: Introduce a dedicated key type? Perhaps even one for each size?

func roundsForKeyLength(key_length_bit int) (int, error) {
	if key_length_bit == 128 {
		return 11, nil
	} else if key_length_bit == 192 {
		return 13, nil
	} else if key_length_bit == 256 {
		return 15, nil
	} else {
		return 0, fmt.Errorf("roundsForKeyLength: unsupported key length: %d bit", key_length_bit)
	}
}

func expandKey(in []byte) ([]byte, error) {
	var numRounds int

	numRounds, err := roundsForKeyLength(len(in) * 8)
	if err != nil {
		return nil, err
	}

	KeyLengthWords := len(in) / 4

	// Result will have 4 32-bit words per round
	r := make([]byte, 4 * 4 * numRounds)

	// First round key is the input key.
	copy(r, in)

	for i := KeyLengthWords; i < 4 * numRounds; i++ {
		if i % KeyLengthWords == 0 {
			r[i*4]   = r[(i-KeyLengthWords)*4]   ^ sBox[r[(i-1)*4+1]] ^ rc_i[i/KeyLengthWords]
			r[i*4+1] = r[(i-KeyLengthWords)*4+1] ^ sBox[r[(i-1)*4+2]]
			r[i*4+2] = r[(i-KeyLengthWords)*4+2] ^ sBox[r[(i-1)*4+3]]
			r[i*4+3] = r[(i-KeyLengthWords)*4+3] ^ sBox[r[(i-1)*4]]
		} else if KeyLengthWords > 6 && i % KeyLengthWords == 4 {
			r[i*4] = r[(i-KeyLengthWords)*4] ^ sBox[r[(i-1)*4]]
			r[i*4+1] = r[(i-KeyLengthWords)*4+1] ^ sBox[r[(i-1)*4+1]]
			r[i*4+2] = r[(i-KeyLengthWords)*4+2] ^ sBox[r[(i-1)*4+2]]
			r[i*4+3] = r[(i-KeyLengthWords)*4+3] ^ sBox[r[(i-1)*4+3]]
		} else {
			r[i*4] = r[(i-KeyLengthWords)*4] ^ r[(i-1)*4]
			r[i*4+1] = r[(i-KeyLengthWords)*4+1] ^ r[(i-1)*4+1]
			r[i*4+2] = r[(i-KeyLengthWords)*4+2] ^ r[(i-1)*4+2]
			r[i*4+3] = r[(i-KeyLengthWords)*4+3] ^ r[(i-1)*4+3]			
		}
	}

	return r, nil
}

func subBytes(in *b128) {
	for i := 0; i < 16; i++ {
		in[i] = sBox[in[i]]
	}
}

func invSubBytes(in *b128) {
	for i := 0; i < 16; i++ {
		in[i] = invSBox[in[i]]
	}
}

func shiftRows(in *b128) {
	in[1], in[5], in[9], in[13] = in[5], in[9], in[13], in[1]
	in[2], in[6], in[10], in[14] = in[10], in[14], in[2], in[6]
	in[3], in[7], in[11], in[15] = in[15], in[3], in[7], in[11]
}

func invShiftRows(in *b128) {
	in[5], in[9], in[13], in[1] = in[1], in[5], in[9], in[13]
	in[10], in[14], in[2], in[6] = in[2], in[6], in[10], in[14]
	in[15], in[3], in[7], in[11] = in[3], in[7], in[11], in[15]
}

func addRoundKey(in *b128, roundKey []byte) {
	for i := 0; i < 16; i++ {
		in[i] ^= roundKey[i]		
	}
}

func mixColumn(r []byte) {
	var a [4]byte
	var b [4]byte
	var c byte
	var h byte
			
	for c = 0; c < 4; c++ {
		a[c] = r[c]
		h = r[c] & 0x80 /* hi bit */
		b[c] = r[c] << 1
		if h == 0x80 {
			b[c] ^= 0x1b /* Rijndael's Galois field */
		}
	}

	r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]
	r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]
	r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]
	r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]
}

func mixColumns(in *b128) {
	mixColumn(in[0:4])
	mixColumn(in[4:8])
	mixColumn(in[8:12])
	mixColumn(in[12:16])
}

func gmul(a, b byte) byte {
	var p byte
	var hi_bit_set bool

	for i := 0; i < 8; i++ {
		if b & 1 == 1 {
			p ^= a
		}
		hi_bit_set = (a & 0x80) != 0x00
		a <<= 1
		if hi_bit_set {
			a ^= 0x1b
		}
		b >>= 1
	}
	return p
}

func invMixColumn(r []byte) {
	var a [4]byte
	var c byte
				
	for c = 0; c < 4; c++ {
		a[c] = r[c]
	}

	r[0] = gmul(a[0],14) ^ gmul(a[3],9) ^ gmul(a[2],13) ^ gmul(a[1],11)
	r[1] = gmul(a[1],14) ^ gmul(a[0],9) ^ gmul(a[3],13) ^ gmul(a[2],11)
	r[2] = gmul(a[2],14) ^ gmul(a[1],9) ^ gmul(a[0],13) ^ gmul(a[3],11)
	r[3] = gmul(a[3],14) ^ gmul(a[2],9) ^ gmul(a[1],13) ^ gmul(a[0],11)
}

func invMixColumns(in *b128) {
	invMixColumn(in[0:4])
	invMixColumn(in[4:8])
	invMixColumn(in[8:12])
	invMixColumn(in[12:16])
}

func aesEncrypt(in b128, key []byte) (b128, error) {
	keyLengthBits := len(key) * 8

	numRounds, err := roundsForKeyLength(keyLengthBits)
	if err != nil {
		return b128{}, err
	}
	
	expandedKey, err := expandKey(key)
	if err != nil {
		return b128{}, err
	}
	
	// Make a copy
	b := in

	roundKeys := make([][]byte, numRounds)
	for i := 0; i < numRounds; i++ {
		roundKeys[i] = expandedKey[16*i:16*(i+1)]
	}

	addRoundKey(&b, roundKeys[0])

	for r := 1; r < numRounds - 1; r++ {
		subBytes(&b)
		shiftRows(&b)
		mixColumns(&b)
		addRoundKey(&b, roundKeys[r])
	}

	subBytes(&b)
	shiftRows(&b)
	addRoundKey(&b, roundKeys[numRounds - 1])

	return b, nil
}

func aesDecrypt(in b128, key []byte) (b128, error) {
	keyLengthBits := len(key) * 8

	numRounds, err := roundsForKeyLength(keyLengthBits)
	if err != nil {
		return b128{}, err
	}
	
	expandedKey, err := expandKey(key)
	if err != nil {
		return b128{}, err
	}

	// Make a copy
	b := in

	roundKeys := make([][]byte, numRounds)
	for i := 0; i < numRounds; i++ {
		roundKeys[i] = expandedKey[16*i:16*(i+1)]
	}

	addRoundKey(&b, roundKeys[numRounds - 1])
	invShiftRows(&b)
	invSubBytes(&b)

	for r := numRounds - 2; r >= 1; r-- {
		addRoundKey(&b, roundKeys[r])
		invMixColumns(&b)
		invShiftRows(&b)
		invSubBytes(&b)
	}

	addRoundKey(&b, roundKeys[0])
	
	return b, nil
}

